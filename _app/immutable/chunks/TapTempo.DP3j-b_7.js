class p{taps;keptDuration;bpm;lastTap;groundZero;counter;previousTap;constructor(){this.taps=[],this.keptDuration=1e3*15,this.bpm=0,this.lastTap=0,this.groundZero=0,this.counter=0,this.previousTap=0}reset(){this.taps=[],this.bpm=0,this.lastTap=0}addBeat(){const t=Date.now();for(this.taps.push(Date.now());this.taps.length&&this.taps[0]<t-this.keptDuration;)this.taps.shift();this.computeBPM()}computeBPM(){const t=Date.now();this.lastTap===0&&(this.groundZero=t,this.counter=0),this.lastTap=t;const i=t-this.previousTap;this.previousTap=this.lastTap;const s=this.lastTap-this.groundZero;s!==0&&(this.bpm=Math.round(6e4*this.counter/s)),this.counter++,i>3e3&&(this.lastTap=0)}}export{p as T};
