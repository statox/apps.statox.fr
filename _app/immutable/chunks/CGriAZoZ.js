class h extends Error{constructor(){super("Tried to divide by 0")}}class x{x=0;y=0;constructor(t=0,i=0){this.x=t,this.y=i}addX(t){return this.x+=t.x,this}addY(t){return this.y+=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addScalarX(t){return this.x+=t,this}addScalarY(t){return this.y+=t,this}subtractX(t){return this.x-=t.x,this}subtractY(t){return this.y-=t.y,this}subtract(t){return this.x-=t.x,this.y-=t.y,this}subtractScalar(t){return this.x-=t,this.y-=t,this}subtractScalarX(t){return this.x-=t,this}subtractScalarY(t){return this.y-=t,this}divideX(t){if(t.x===0)throw new h;return this.x/=t.x,this}divideY(t){if(t.y===0)throw new h;return this.y/=t.y,this}divide(t){if(t.x===0||t.y===0)throw new h;return this.x/=t.x,this.y/=t.y,this}divideScalar(t){if(t===0)throw new h;return this.x/=t,this.y/=t,this}divideScalarX(t){if(t===0)throw new h;return this.x/=t,this}divideScalarY(t){if(t===0)throw new h;return this.y/=t,this}multiplyX(t){return this.x*=t.x,this}multiplyY(t){return this.y*=t.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}multiplyScalarX(t){return this.x*=t,this}multiplyScalarY(t){return this.y*=t,this}invertX(){return this.x*=-1,this}invertY(){return this.y*=-1,this}invert(){return this.x*=-1,this.y*=-1,this}normalize(){const t=this.length();return this.divideScalar(t),this}norm=this.normalize;limit(t,i){return Math.abs(this.x)>t&&(this.x*=i),Math.abs(this.y)>t&&(this.y*=i),this}randomizeX(t,i){const r=Math.min(t.x,i.x),n=Math.max(t.x,i.x);return this.x=e(r,n),this}randomizeY(t,i){const r=Math.min(t.y,i.y),n=Math.max(t.y,i.y);return this.y=e(r,n),this}randomize(t,i){return this.randomizeX(t,i),this.randomizeY(t,i),this}randomizeAny(t,i){return Math.random()<.5?this.randomizeX(t,i):this.randomizeY(t,i),this}unfloat(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}toFixed(t=8){return this.x=Number(this.x.toFixed(t)),this.y=Number(this.y.toFixed(t)),this}mixX(t,i=.5){return this.x=(1-i)*this.x+i*t.x,this}mixY(t,i=.5){return this.y=(1-i)*this.y+i*t.y,this}mix(t,i=.5){return this.mixX(t,i),this.mixY(t,i),this}clone(){return new x(this.x,this.y)}copyX(t){return this.x=t.x,this}copyY(t){return this.y=t.y,this}copy(t){return this.x=t.x,this.y=t.y,this}zero(){return this.x=0,this.y=0,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}projectOnto(t){const i=(this.x*t.x+this.y*t.y)/(t.x*t.x+t.y*t.y);return this.x=i*t.x,this.y=i*t.y,this}horizontalAngle(){return Math.atan2(this.y,this.x)}horizontalAngleDeg(){return a(this.horizontalAngle())}verticalAngle(){return Math.atan2(this.x,this.y)}verticalAngleDeg(){return a(this.verticalAngle())}angle=this.horizontalAngle;direction=this.horizontalAngle;angleDeg=this.horizontalAngleDeg;rotate(t){const i=this.x*Math.cos(t)-this.y*Math.sin(t),r=this.x*Math.sin(t)+this.y*Math.cos(t);return this.x=i,this.y=r,this}rotateDeg(t){const i=u(t);return this.rotate(i)}rotateTo(t){return this.rotate(t-this.horizontalAngle())}rotateToDeg(t){const i=u(t);return this.rotateTo(i)}distanceX(t){return this.x-t.x}absDistanceX(t){return Math.abs(this.distanceX(t))}distanceY(t){return this.y-t.y}absDistanceY(t){return Math.abs(this.distanceY(t))}distance(t){return Math.sqrt(this.distanceSq(t))}distanceSq(t){const i=this.distanceX(t),r=this.distanceY(t);return i*i+r*r}length(){return Math.sqrt(this.lengthSq())}magnitude=this.length;lengthSq(){return this.x*this.x+this.y*this.y}isZero(){return this.x===0&&this.y===0}isEqualTo(t){return this.x===t.x&&this.y===t.y}toString(){return`x: ${this.x}, y: ${this.y}`}toArray(){return[this.x,this.y]}toObject(){return{x:this.x,y:this.y}}}const y=180/Math.PI;function e(s,t){return Math.random()*(t-s)+s}function a(s){return s*y}function u(s){return s/y}export{x as V};
