class h extends Error{constructor(){super("Tried to divide by 0")}}class n{x=0;y=0;constructor(t=0,i=0){this.x=t,this.y=i}static fromArray=t=>{if(t.length<2)throw new TypeError("The length of the argument array must be at least 2");if(t[0]===null||t[0]===void 0||Number.isNaN(Number(t[0]))||Number.isNaN(t[0]))throw new TypeError("The length of the argument array must be at least 2");if(t[1]===null||t[1]===void 0||Number.isNaN(Number(t[1]))||Number.isNaN(t[1]))throw new TypeError("The length of the argument array must be at least 2");return new n(Number(t[0]),Number(t[1]))};static fromObject=t=>{if(t.x===null||t.x===void 0||t.y===null||t.y===void 0)throw new TypeError("The argument object must have a .x and .y properties");if(Number.isNaN(Number(t.x))||Number.isNaN(t.x))throw new TypeError("The .x property of the argument object must be a number");if(Number.isNaN(Number(t.y))||Number.isNaN(t.y))throw new TypeError("The .y property of the argument object must be a number");return new n(Number(t.x),Number(t.y))};static fromPolar=(t,i)=>new n(i*Math.cos(t),i*Math.sin(t));addX(t){return this.x+=t.x,this}addY(t){return this.y+=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addScalarX(t){return this.x+=t,this}addScalarY(t){return this.y+=t,this}subtractX(t){return this.x-=t.x,this}subtractY(t){return this.y-=t.y,this}subtract(t){return this.x-=t.x,this.y-=t.y,this}subtractScalar(t){return this.x-=t,this.y-=t,this}subtractScalarX(t){return this.x-=t,this}subtractScalarY(t){return this.y-=t,this}divideX(t){if(t.x===0)throw new h;return this.x/=t.x,this}divideY(t){if(t.y===0)throw new h;return this.y/=t.y,this}divide(t){if(t.x===0||t.y===0)throw new h;return this.x/=t.x,this.y/=t.y,this}divideScalar(t){if(t===0)throw new h;return this.x/=t,this.y/=t,this}divideScalarX(t){if(t===0)throw new h;return this.x/=t,this}divideScalarY(t){if(t===0)throw new h;return this.y/=t,this}multiplyX(t){return this.x*=t.x,this}multiplyY(t){return this.y*=t.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}multiplyScalarX(t){return this.x*=t,this}multiplyScalarY(t){return this.y*=t,this}invertX(){return this.x*=-1,this}invertY(){return this.y*=-1,this}invert(){return this.x*=-1,this.y*=-1,this}normalize(){const t=this.length();return this.divideScalar(t),this}norm=this.normalize;clampX(t,i){if(i!=null){if(i>t)throw RangeError("min must be smaller than max");this.x=Math.max(this.x,i)}return this.x=Math.min(this.x,t),this}clampY(t,i){if(i!=null){if(i>t)throw RangeError("min must be smaller than max");this.y=Math.max(this.y,i)}return this.y=Math.min(this.y,t),this}clamp(t,i){const r=this.magnitude();let e=Number.MIN_VALUE;if(i!=null){if(i>t)throw RangeError("min must be smaller than max");e=i}const x=Math.max(Math.min(r,t),e);return this.resize(x),this}limitX(t,i){return Math.abs(this.x)>t&&(this.x*=i),this}limitY(t,i){return Math.abs(this.y)>t&&(this.y*=i),this}limit(t,i){return this.limitX(t,i),this.limitY(t,i),this}randomizeX(t,i){const r=Math.min(t.x,i.x),e=Math.max(t.x,i.x);return this.x=o(r,e),this}randomizeY(t,i){const r=Math.min(t.y,i.y),e=Math.max(t.y,i.y);return this.y=o(r,e),this}randomize(t,i){return this.randomizeX(t,i),this.randomizeY(t,i),this}randomizeAny(t,i){return Math.random()<.5?this.randomizeX(t,i):this.randomizeY(t,i),this}unfloat(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}fixPrecision(t=8){return this.x=Number(this.x.toFixed(t)),this.y=Number(this.y.toFixed(t)),this}mixX(t,i=.5){if(i<0||i>1)throw new RangeError("The amount argument must be between 0 and 1.");return this.x=(1-i)*this.x+i*t.x,this}mixY(t,i=.5){if(i<0||i>1)throw new RangeError("The amount argument must be between 0 and 1.");return this.y=(1-i)*this.y+i*t.y,this}mix(t,i=.5){if(i<0||i>1)throw new RangeError("The amount argument must be between 0 and 1.");return this.mixX(t,i),this.mixY(t,i),this}clone(){return new n(this.x,this.y)}copyX(t){return this.x=t.x,this}copyY(t){return this.y=t.y,this}copy(t){return this.x=t.x,this.y=t.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}projectOnto(t){const i=(this.x*t.x+this.y*t.y)/(t.x*t.x+t.y*t.y);return this.x=i*t.x,this.y=i*t.y,this}horizontalAngle(){return Math.atan2(this.y,this.x)}horizontalAngleDeg(){return a(this.horizontalAngle())}verticalAngle(){return Math.atan2(this.x,this.y)}verticalAngleDeg(){return a(this.verticalAngle())}angle=this.horizontalAngle;direction=this.horizontalAngle;angleDeg=this.horizontalAngleDeg;angleWith(t){return this.isZero()&&t.isZero()?0:Math.acos((this.x*t.x+this.y*t.y)/(this.magnitude()*t.magnitude()))}angleDegWith(t){return a(this.angleWith(t))}orientedAngleWith(t){return Math.atan2(this.x*t.y-this.y*t.x,this.x*t.x+this.y*t.y)}orientedAngleDegWith(t){return a(this.orientedAngleWith(t))}rotateBy(t){const i=this.x*Math.cos(t)-this.y*Math.sin(t),r=this.x*Math.sin(t)+this.y*Math.cos(t);return this.x=i,this.y=r,this}rotateTowards(t,i){if(i<=0)throw new RangeError("The max angle must be positive");const r=this.angleWith(t);let e=Math.min(r,i);return this.cross(t)<0&&(e=-e),this.rotateBy(e)}rotateTowardsDeg(t,i){return this.rotateTowards(t,u(i))}rotateByDeg(t){const i=u(t);return this.rotateBy(i)}rotateTo(t){return this.rotateBy(t-this.horizontalAngle())}rotateToDeg(t){const i=u(t);return this.rotateTo(i)}distanceX(t){return this.x-t.x}absDistanceX(t){return Math.abs(this.distanceX(t))}distanceY(t){return this.y-t.y}absDistanceY(t){return Math.abs(this.distanceY(t))}distance(t){return Math.sqrt(this.distanceSq(t))}distanceSq(t){const i=this.distanceX(t),r=this.distanceY(t);return i*i+r*r}length(){return Math.sqrt(this.lengthSq())}magnitude=this.length;lengthSq(){return this.x*this.x+this.y*this.y}zero(){return this.x=0,this.y=0,this}resize(t){return this.normalize(),this.multiplyScalar(t),this}isParallelTo(t){return Math.abs(this.cross(t))<1e-6}isPerpendicularTo(t){return Math.abs(this.dot(t))<1e-6}isZero(){return this.x===0&&this.y===0}isEqualTo(t){return this.x===t.x&&this.y===t.y}toString(){return`x:${this.x}, y:${this.y}`}toArray(){return[this.x,this.y]}toObject(){return{x:this.x,y:this.y}}toPolar(){const t=Math.atan(this.y/this.x);return{r:Math.sqrt(this.x*this.x+this.y*this.y),theta:Number.isNaN(t)?0:t}}}const y=180/Math.PI;function o(s,t){return Math.random()*(t-s)+s}function a(s){return s*y}function u(s){return s/y}export{n as V};
