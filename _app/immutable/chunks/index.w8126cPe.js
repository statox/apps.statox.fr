var u=Object.defineProperty;var d=(r,t,e)=>t in r?u(r,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[t]=e;var c=(r,t,e)=>d(r,typeof t!="symbol"?t+"":t,e);import{P as i}from"./public.xpUinP6t.js";import{g as h}from"./Main.BLA7JSmE.js";const g=async r=>{const{path:t}=r;if(!t.length||t[0]!=="/")throw new Error("Malformed path");const e=new Headers;if(e.set("Content-Type","application/json"),r.authorize){const o=await h();e.set("Authorization",`Bearer ${o}`)}const s=await fetch(`${i}${t}`,{method:"GET",mode:"cors",headers:e});if(s.status<200||s.status>=300){let o;try{o=await s.text()}catch{o="could not parse server error message"}throw new p(s.status,o)}return s.json()};class p extends Error{constructor(e,s){super(s);c(this,"code");this.code=e}}const y=async r=>{const{path:t,data:e}=r;if(!t.length||t[0]!=="/")throw new Error("Malformed path");const s=await h(),o=JSON.stringify(e),a=await fetch(`${i}${t}`,{method:"POST",mode:"cors",headers:{"Content-Type":"application/json",Authorization:`Bearer ${s}`},body:o});if(a.status<200||a.status>=300){let n;try{n=await a.text()}catch{n="could not parse server error message"}throw new p(a.status,n)}return a.json()};export{p as A,y as a,g as r};
