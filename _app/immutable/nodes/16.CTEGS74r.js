import"../chunks/NZTpNUN0.js";import{z as mt,A as I,B as D,p as nt,f as q,F as P,x as N,g as l,a as d,E as gt,v as _,s as g,aZ as J,G as b,y as wt,a_ as K,c as Q}from"../chunks/Br9SMxIB.js";import{d as yt,s as dt}from"../chunks/BBzb7ThI.js";import{i as X}from"../chunks/CvXxFVm9.js";import{e as Y,i as B}from"../chunks/D1-nhZYT.js";import{r as S,a as _t,s as bt,c as tt}from"../chunks/DWdbj9D8.js";import{b as et}from"../chunks/C6S4cPPP.js";import{M as Mt}from"../chunks/DKmGubEx.js";var f=(t=>(t[t.notOver=0]="notOver",t[t.winPlayer1=1]="winPlayer1",t[t.winPlayer2=2]="winPlayer2",t[t.draw=3]="draw",t))(f||{});const k=7,y=6,h=4;class xt extends Error{constructor(r){super("Can't play in column "+r)}}const V=t=>t.map(r=>[...r]),st=(t,r)=>t[r].length!==y,W=t=>{const r=[];for(let e=0;e<t.length;e++)t[e].length<y&&r.push(e);return r},Ct=t=>{const r=k*y,e=t.reduce((s,i)=>s+i.length,0);return r===e},Pt=t=>{for(let r=0;r<k;r++)for(let e=0;e<y;e++){if(t[r].length<e||!t[r][e])continue;const s=t[r][e];let i=0,u=0,a=0,c=0;for(let n=0;n<h;n++)e+n<=t[r].length&&t[r][e+n]===s&&i++,r+n<t.length&&t[r+n][e]===s&&u++,r+n<t.length&&e+n<=t[r+n].length&&t[r+n][e+n]===s&&a++,r+n<t.length&&e-n>=0&&t[r+n][e-n]===s&&c++;if(i===h||u===h||a===h||c===h)return s}return null},kt=t=>{if(M(t)===0)return null;for(let r=0;r<k;r++)for(let e=0;e<y;e++){if(t[r].length<e||!t[r][e])continue;const s=t[r][e],i=[],u=[],a=[],c=[];for(let n=0;n<h;n++)e+n<=t[r].length&&t[r][e+n]===s&&i.push([e+n,r]),r+n<t.length&&t[r+n][e]===s&&u.push([e,r+n]),r+n<t.length&&e+n<=t[r+n].length&&t[r+n][e+n]===s&&a.push([e+n,r+n]),r+n<t.length&&e-n>=0&&t[r+n][e-n]===s&&c.push([e-n,r+n]);if(i.length===h)return i;if(u.length===h)return u;if(a.length===h)return a;if(c.length===h)return c}return null},M=t=>{if(Ct(t))return 3;const r=Pt(t);return r===1?1:r===2?2:0},O=(t,r,e)=>{if(!st(t,e))throw new xt(e);return t[e].push(r),t},At=(t,r,e)=>{const s=Gt(t,r,e?.iterations,e?.c);return O(t,r,s)};class lt{board;player;move;parent;children=[];visits=0;wins=0;constructor(r,e,s=null,i=null){this.board=r,this.player=e,this.move=s,this.parent=i}isFullyExpanded(){return this.children.length===W(this.board).length}isTerminal(){return M(this.board)!==f.notOver}}function rt(t,r,e,s=Math.sqrt(2)){return e===0?1/0:r/e+s*Math.sqrt(Math.log(t)/e)}function It(t,r){for(;!t.isTerminal();)if(t.isFullyExpanded())t=Tt(t,r);else return Ot(t);return t}function Ot(t){const r=t.children.map(c=>c.move),s=W(t.board).filter(c=>!r.includes(c)),i=s[Math.floor(Math.random()*s.length)],u=V(t.board);O(u,t.player,i);const a=new lt(u,t.player===1?2:1,i,t);return t.children.push(a),a}function Tt(t,r){return t.children.reduce((e,s)=>{const i=rt(t.visits,e.wins,e.visits,r);return rt(t.visits,s.wins,s.visits,r)>i?s:e})}function Et(t){const r=V(t.board);let e=t.player;for(;;){const s=M(r);if(s!==f.notOver)return s;const i=W(r),u=i[Math.floor(Math.random()*i.length)];O(r,e,u),e=e===1?2:1}}function Ft(t,r){let e=t;for(;e!==null;)e.visits+=1,r===f.winPlayer1&&e.parent?.player===1||r===f.winPlayer2&&e.parent?.player===2?e.wins+=1:r===f.draw&&(e.wins+=.5),e=e.parent}function Gt(t,r,e=1e3,s=Math.sqrt(2)){const i=new lt(V(t),r,null,null);for(let a=0;a<e;a++){const c=It(i,s),n=Et(c);Ft(c,n)}return i.children.reduce((a,c)=>a.visits>c.visits?a:c).move}const qt=(t,r,e)=>{g(r,Array.from({length:7},()=>[]),!0),g(e,1)};var Nt=(t,r,e,s)=>r(l(e),l(s)),Vt=nt("<div><button><div></div></button></div>"),Wt=nt(`<!> <div class="main"><h3>Gravitrip</h3></div> <span><button>Restart game</button> <span style="font-weight: bold"><!></span></span> <div class="board svelte-1bdwycb"></div> <div><h4>Monte Carlo Tree Search parameters</h4> <label for="mcts-iterations">Iterations:</label> <input id="mcts-iterations" type="number" min="0"/> <small>Number of simulations MCTS will run before choosing a move. Higher values usually mean
        stronger play but slower decisions.</small> <br/><br/> <label for="mcts-c">C (exploration constant):</label> <input id="mcts-c" type="number" min="0" step="0.1"/> <small>Controls the balance between exploration and exploitation. Lower values (e.g. 0.5, 0.7)
        favor tested moves, higher values (e.g. 2.0, 5.0) explore more. A typical default is √2 ≈
        1.41.</small></div>`,1);function Dt(t,r){mt(r,!0);let e=I(D(Array.from({length:7},()=>[]))),s=J(()=>M(l(e))),i=J(()=>kt(l(e))),u=I(1e3),a=I(D(Number(Math.sqrt(2).toFixed(3))));const c=Array.from({length:y},(o,v)=>v),n=Array.from({length:k},(o,v)=>v);let p=I(1);const it=(o,v)=>{l(p)===1&&st(l(e),o)&&M(l(e))===f.notOver&&(g(e,O(l(e),v,o),!0),g(p,l(p)===1?2:1,!0),setTimeout(()=>at(),300))},at=()=>{l(p)===2&&M(l(e))===f.notOver&&(g(e,At(l(e),l(p),{iterations:l(u),c:l(a)}),!0),g(p,l(p)===1?2:1,!0))},ot=(o,v)=>l(i)===null?!1:l(i).filter(w=>w[0]===o&&w[1]===v).length>0;var R=Wt(),$=q(R);Mt($,{title:"Gravitrip",description:"Gravitrip"});var T=_($,4),z=P(T);z.__click=[qt,e,p];var H=_(z,2),ct=P(H);{var ut=o=>{var v=K("Game Over");d(o,v)},vt=o=>{var v=Q(),w=q(v);{var F=x=>{var m=K();N(()=>dt(m,`Player ${l(s)??""} wins`)),d(x,m)};X(w,x=>{(l(s)===f.winPlayer1||l(s)===f.winPlayer2)&&x(F)},!0)}d(o,v)};X(ct,o=>{l(s)===f.draw?o(ut):o(vt,!1)})}b(H),b(T);var A=_(T,2);Y(A,21,()=>c.reverse(),B,(o,v)=>{var w=Q(),F=q(w);Y(F,17,()=>n,B,(x,m)=>{var G=Vt(),C=P(G);let Z;C.__click=[Nt,it,m,p];var ft=P(C);let j;b(C),b(G),N((ht,pt)=>{bt(C,"aria-label","col-"+l(m)),Z=tt(C,1,"outer-cell svelte-1bdwycb",null,Z,ht),j=tt(ft,1,"cell svelte-1bdwycb",null,j,pt)},[()=>({"winning-cell":ot(l(v),l(m))}),()=>({player1:l(e)[l(m)][l(v)]===1,player2:l(e)[l(m)][l(v)]===2})]),d(x,G)}),d(o,w)}),b(A);var L=_(A,2),E=_(P(L),4);S(E);var U=_(E,9);S(U),wt(2),b(L),N(()=>_t(A,`--nb-col: ${k}; --nb-row: ${y}`)),et(E,()=>l(u),o=>g(u,o)),et(U,()=>l(a),o=>g(a,o)),d(t,R),gt()}yt(["click"]);export{Dt as component};
